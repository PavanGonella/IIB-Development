CREATE COMPUTE MODULE yhfbzfda_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		--CALL CopyMessageHeaders();
		CALL CopyEntireMessage1a();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage1a() BEGIN
		
		DECLARE inputString CHARACTER;
		DECLARE wd BLOB InputRoot.BLOB.BLOB;
		SET inputString = CAST(wd AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId);
		SET inputString = RTRIM(inputString);
		SET inputString = LTRIM(inputString);
		
		
		
		DECLARE var BOOLEAN STARTSWITH(inputString , '{');
		DECLARE var2 BOOLEAN ENDSWITH(inputString , '}');
		DECLARE va3 BOOLEAN STARTSWITH(inputString , '<');
		DECLARE va4 BOOLEAN ENDSWITH(inputString , '>');
		
		
		
		
		
		--IF (STARTSWITH(inputString , '{')  AND ENDSWITH(inputString, '}')) THEN
		
		IF STARTSWITH(inputString , '{')  THEN
			 SET OutputRoot.JSON.Data = inputString;
			 PROPAGATE TO TERMINAL 'out1';
		END IF;
		
			 
		--IF (STARTSWITH(inputString, '<') AND ENDSWITH(inputString, '>')) THEN
		
		IF STARTSWITH(inputString, '<') THEN
			-- SET OutputRoot.XMLNSC.Data = inputString;
			
			 SET OutputRoot = NULL;
       		 SET OutputRoot.Properties = InputRoot.Properties;
    	     CREATE LASTCHILD OF OutputRoot.XMLNSC DOMAIN('XMLNSC') PARSE(InputRoot.BLOB.BLOB, InputRoot.Properties.Encoding, InputRoot.Properties.CodedCharSetId);
			
			 PROPAGATE TO TERMINAL 'out2';
			
		END IF;
		
		
		
		--SET OutputRoot = InputRoot;
	END;
END MODULE;